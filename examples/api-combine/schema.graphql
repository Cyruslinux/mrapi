type Query {
  findOneUser(where: UserWhereUniqueInput!): User
  findManyUser(where: UserWhereInput, orderBy: [UserOrderByInput], cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, skip: Int, take: Int): [User]
  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByInput], cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, skip: Int, take: Int): User
  findManyUserCount(where: UserWhereInput, orderBy: [UserOrderByInput], cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, skip: Int, take: Int): Int!
  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByInput], cursor: UserWhereUniqueInput, distinct: UserDistinctFieldEnum, skip: Int, take: Int): AggregateUser
  findOnePost(where: PostWhereUniqueInput!): Post
  findManyPost(where: PostWhereInput, orderBy: [PostOrderByInput], cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, skip: Int, take: Int): [Post]
  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByInput], cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, skip: Int, take: Int): Post
  findManyPostCount(where: PostWhereInput, orderBy: [PostOrderByInput], cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, skip: Int, take: Int): Int!
  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByInput], cursor: PostWhereUniqueInput, distinct: PostDistinctFieldEnum, skip: Int, take: Int): AggregatePost

  """get server time"""
  serverTime(type: String): String
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  updateOneUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User!
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyUser(where: UserWhereInput, data: UserUpdateManyMutationInput!): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  createOnePost(data: PostCreateInput!): Post!
  updateOnePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post!
  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  updateManyPost(where: PostWhereInput, data: PostUpdateManyMutationInput!): BatchPayload!
  deleteManyPost(where: PostWhereInput): BatchPayload!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type User {
  id: Int!
  email: String!
  name: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: PostDistinctFieldEnum): [Post!]!
}

type Post {
  id: Int!
  title: String!
  content: String
  published: Boolean!
  author: User
  userId: Int
}

type BatchPayload {
  count: Int!
}

"""Json custom scalar type"""
scalar Json

input FindManyUserArgs {
  skip: Int
  take: Int
  where: UserWhereInput
  orderBy: [UserOrderByInput]
  cursor: UserWhereUniqueInput
}

input UserSelect {
  id: Boolean
  email: Boolean
  name: Boolean
  posts: FindManyPostArgs
}

input UserInclude {
  posts: FindManyPostArgs
}

input FindManyPostArgs {
  skip: Int
  take: Int
  where: PostWhereInput
  orderBy: [PostOrderByInput]
  cursor: PostWhereUniqueInput
}

input PostSelect {
  id: Boolean
  title: Boolean
  content: Boolean
  published: Boolean
  author: FindManyUserArgs
  userId: Boolean
}

input PostInclude {
  author: FindManyUserArgs
}

enum UserDistinctFieldEnum {
  id
  email
  name
}

enum PostDistinctFieldEnum {
  id
  title
  content
  published
  userId
}

enum SortOrder {
  asc
  desc
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  NOT: [UserWhereInput]
  id: IntFilter
  email: StringFilter
  name: StringNullableFilter
  posts: PostListRelationFilter
}

input UserOrderByInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

input PostWhereInput {
  AND: [PostWhereInput]
  OR: [PostWhereInput]
  NOT: [PostWhereInput]
  id: IntFilter
  title: StringFilter
  content: StringNullableFilter
  published: BoolFilter
  author: UserWhereInput
  userId: IntNullableFilter
}

input PostOrderByInput {
  id: SortOrder
  title: SortOrder
  content: SortOrder
  published: SortOrder
  userId: SortOrder
}

input PostWhereUniqueInput {
  id: Int
}

input UserCreateInput {
  email: String
  name: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input PostCreateInput {
  title: String
  content: String
  published: Boolean
  author: UserCreateOneWithoutPostsInput
}

input PostUpdateInput {
  title: StringFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyMutationInput {
  title: StringFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
}

input IntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput]
  connect: [PostWhereUniqueInput]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput]
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput]
  connect: [PostWhereUniqueInput]
  set: [PostWhereUniqueInput]
  disconnect: [PostWhereUniqueInput]
  delete: [PostWhereUniqueInput]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [PostUpdateManyWithWhereNestedInput]
  deleteMany: [PostScalarWhereInput]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput]
  connectOrCreate: [PostCreateOrConnectWithoutUserInput]
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostInput
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostInput
}

input NestedIntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input PostCreateWithoutAuthorInput {
  title: String
  content: String
  published: Boolean
}

input PostCreateOrConnectWithoutUserInput {
  where: PostWhereUniqueInput
  create: PostCreateWithoutAuthorInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutAuthorDataInput
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput
  data: PostUpdateManyDataInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput]
  OR: [PostScalarWhereInput]
  NOT: [PostScalarWhereInput]
  id: IntFilter
  title: StringFilter
  content: StringNullableFilter
  published: BoolFilter
  userId: IntNullableFilter
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutAuthorDataInput
  create: PostCreateWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  email: String
  name: String
}

input UserCreateOrConnectWithoutPostInput {
  where: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput
  create: UserCreateWithoutPostsInput
}

input PostUpdateWithoutAuthorDataInput {
  title: StringFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
}

input PostUpdateManyDataInput {
  title: StringFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
}

type AggregateUser {
  count: Int!
  avg: UserAvgAggregateOutputType!
  sum: UserSumAggregateOutputType!
  min: UserMinAggregateOutputType!
  max: UserMaxAggregateOutputType!
}

type AggregatePost {
  count: Int!
  avg: PostAvgAggregateOutputType!
  sum: PostSumAggregateOutputType!
  min: PostMinAggregateOutputType!
  max: PostMaxAggregateOutputType!
}

type UserAvgAggregateOutputType {
  id: Float!
}

type UserSumAggregateOutputType {
  id: Int!
}

type UserMinAggregateOutputType {
  id: Int!
}

type UserMaxAggregateOutputType {
  id: Int!
}

type PostAvgAggregateOutputType {
  id: Float!
  userId: Float!
}

type PostSumAggregateOutputType {
  id: Int!
  userId: Int!
}

type PostMinAggregateOutputType {
  id: Int!
  userId: Int!
}

type PostMaxAggregateOutputType {
  id: Int!
  userId: Int!
}
